@use "sass:list";
@use "sass:string";

@function split-string($string, $delimiter) {
  $list: ();
  $delimiter-length: string.length($delimiter);
  $index: string.index($string, $delimiter);
  
  @if $index == null {
    @return ($string);
  }

  @while $index != null {
    $list: list.append($list, string.slice($string, 1, $index - 1));
    $string: string.slice($string, $index + $delimiter-length);
    $index: string.index($string, $delimiter);
  }

  @return list.append($list, $string);
}

@function get-first-part($string, $delimiter) {
  $split-list: split-string($string, $delimiter);
  @return list.nth($split-list, 1);
}

// Loop through the colors
@mixin colorGenerate($class, $attr, $colors) {

    @each $color in $colors {

		.#{$class}-#{$color} {

            &, &[type] {

				#{$attr}: var(--solidie-color-#{$color});
				transition: all 0.4s;

				&.interactive:hover, &.active {
					#{$attr}: var(--solidie-color-#{get-first-part($color, '-')}-150);

					&.scalable {
						transform: scale(1.05);
					}
				}
            }
        }
    }
}

$colors: 'text', 'material', 'white', 'error', 'warning', 'success', 'transparent';

@for $i from 1 through 9 {

  	$colors: list.append($colors, 'text-#{$i*10}');
  	$colors: list.append($colors, 'material-#{$i*10}');

  	$colors: list.append($colors, 'text-#{$i}');
  	$colors: list.append($colors, 'material-#{$i}');
}

@include colorGenerate('color', 'color', $colors);
@include colorGenerate('bg-color', 'background-color', $colors);
@include colorGenerate('b-color', 'border-color', $colors);
